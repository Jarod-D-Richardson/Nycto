const chip = @import("chip.zig");
const Register = chip.Register;

pub const GPIO = extern struct {
    CRL: chip.Register(
        packed struct(u32) {
            mode0: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf0: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode1: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf1: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode2: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf2: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode3: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf3: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode4: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf4: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode5: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf5: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode6: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf6: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode7: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf7: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
        },
    ),
    CRH: Register(
        packed struct(u32) {
            mode8: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf8: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode9: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf9: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode10: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf10: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode11: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf11: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode12: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf12: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode13: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf13: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode14: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf14: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
            mode15: enum(u2) {
                Input = 0b00,
                Output10 = 0b01,
                Output2 = 0b10,
                Output50 = 0b11,
            },
            cnf15: enum(u2) {
                Analog_GPPushPull = 0b00,
                FloatingInput_GPOpenDrain = 0b01,
                PullUpDown_AFPushPull = 0b10,
                Reserved_AFOpenDrain = 0b11,
            },
        },
    ),
    IDR: Register(packed struct(u32) {
        idr0: u1,
        idr1: u1,
        idr2: u1,
        idr3: u1,
        idr4: u1,
        idr5: u1,
        idr6: u1,
        idr7: u1,
        idr8: u1,
        idr9: u1,
        idr10: u1,
        idr11: u1,
        idr12: u1,
        idr13: u1,
        idr14: u1,
        idr15: u1,
        reserved: u16,
    }),
    ODR: Register(packed struct(u32) {
        odr0: u1,
        odr1: u1,
        odr2: u1,
        odr3: u1,
        odr4: u1,
        odr5: u1,
        odr6: u1,
        odr7: u1,
        odr8: u1,
        odr9: u1,
        odr10: u1,
        odr11: u1,
        odr12: u1,
        odr13: u1,
        odr14: u1,
        odr15: u1,
        reserved: u16,
    }),
    BSRR: Register(packed struct(u32) {
        bs0: u1,
        bs1: u1,
        bs2: u1,
        bs3: u1,
        bs4: u1,
        bs5: u1,
        bs6: u1,
        bs7: u1,
        bs8: u1,
        bs9: u1,
        bs10: u1,
        bs11: u1,
        bs12: u1,
        bs13: u1,
        bs14: u1,
        bs15: u1,
        br0: u1,
        br1: u1,
        br2: u1,
        br3: u1,
        br4: u1,
        br5: u1,
        br6: u1,
        br7: u1,
        br8: u1,
        br9: u1,
        br10: u1,
        br11: u1,
        br12: u1,
        br13: u1,
        br14: u1,
        br15: u1,
    }),
    BRR: Register(packed struct(u32) {
        br0: u1,
        br1: u1,
        br2: u1,
        br3: u1,
        br4: u1,
        br5: u1,
        br6: u1,
        br7: u1,
        br8: u1,
        br9: u1,
        br10: u1,
        br11: u1,
        br12: u1,
        br13: u1,
        br14: u1,
        br15: u1,
        reserved: u16,
    }),
    LCKR: Register(packed struct(u32) {
        lck0: u1,
        lck1: u1,
        lck2: u1,
        lck3: u1,
        lck4: u1,
        lck5: u1,
        lck6: u1,
        lck7: u1,
        lck8: u1,
        lck9: u1,
        lck10: u1,
        lck11: u1,
        lck12: u1,
        lck13: u1,
        lck14: u1,
        lck15: u1,
        lckk: u1,
        reserved: u15,
    }),
};
